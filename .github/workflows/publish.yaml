name: Publish to Package Registry

on:
  workflow_dispatch:
    inputs:
      publish_to_primary:
        description: 'Publish to Primary Registry'
        type: boolean
        required: false
        default: false
env:
  PYTHONUNBUFFERED: True
  PRE_COMMIT_HOME: ${{ github.workspace }}/.precommit_cache

permissions:
    id-token: write
    contents: write # needed for mutex

jobs:
  get-values:
    name: Get Values
    runs-on: ubuntu-24.04
    outputs:
      package-version: ${{ steps.extract-package-version.outputs.package_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.12.7
      - name: Extract package version
        id: extract-package-version
        run: |
          VERSION=$(python3 ./.github/workflows/git_tag.py)
          echo "Extracted version: $VERSION"
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT

  lint:
    name: Pre-commit
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: 3.12.7

      - name: Set up mutex # Github concurrency management is horrible, things get arbitrarily cancelled if queued up. So using mutex until github fixes itself. When multiple jobs are modifying cache at once, weird things can happen.  possible issue is https://github.com/actions/toolkit/issues/658
        if: ${{ runner.os != 'Windows' }} # we're just gonna have to YOLO on Windows, because this action doesn't support it yet https://github.com/ben-z/gh-action-mutex/issues/14
        uses: ben-z/gh-action-mutex@1ebad517141198e08d47cf72f3c0975316620a65 # v1.0.0-alpha.10
        with:
          branch: mutex-venv-ubuntu-24.04-py3.12.7
        timeout-minutes: 30 # this is the amount of time this action will wait to attempt to acquire the mutex lock before failing, e.g. if other jobs are queued up in front of it

      - name: Cache Pre-commit hooks
        uses: actions/cache@v4.2.2
        env:
          cache-name: cache-pre-commit-hooks
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: ubuntu-24.04-py3.12.7-build-${{ env.cache-name }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ubuntu-24.04-py3.12.7-build-${{ env.cache-name }}-

      - name: Run pre-commit
        run:  pre-commit run -a

  test:
    needs: [ lint ]
    strategy:
      matrix:
        os:
          - "ubuntu-24.04"
          - windows-2025
        python-version:

          - 3.12.7

        include:
          - os: "ubuntu-24.04"
            python-version: "3.12.7"
            JOB_MATCHING_DEV_ENV: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install python tooling
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: ${{ matrix.python-version }}

      - name: Unit test
        run: uv run pytest --durations=5

  build:
    needs: [ test ]
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install python tooling
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: 3.12.7


      - name: Build package
        run: |

          uv build --no-sources

      - name: Upload build package
        uses: actions/upload-artifact@v4.6.2
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: error


  publish-to-staging:
    name: Publish Python distribution to Staging Package Registry
    needs: [ build ]
    runs-on: ubuntu-24.04
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pyalab
    permissions:
      attestations: write
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4.2.1
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          attestations: false
          repository-url: https://test.pypi.org/legacy/



  install-from-staging:
    name: Install package from staging registry
    needs: [ publish-to-staging, get-values ]
    runs-on: ubuntu-24.04
    steps:
      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.12.7

      - name: Sleep to allow PyPI Index to update before proceeding to the next step
        uses: juliangruber/sleep-action@v2.0.3
        with:
          time: 60s
      - name: Install from staging registry
        run: pip install -i https://test.pypi.org/simple/ pyalab==${{ needs.get-values.outputs.package-version }}
      - name: Confirm library can be imported successfully
        run: python -c "import pyalab"

  create-tag:
    name: Create the git tag
    if: ${{ github.event.inputs.publish_to_primary }}
    needs: [ install-from-staging ]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.12.7
      - name: Confirm tag not already present
        run: python3 ./.github/workflows/git_tag.py --confirm-tag-not-present
      - name: Create tag
        run: python3 ./.github/workflows/git_tag.py --push-tag-to-remote

  publish-to-primary:
    name: Publish Python distribution to Primary Package Registry
    if: ${{ github.event.inputs.publish_to_primary }}
    needs: [ create-tag ]
    runs-on: ubuntu-24.04
    environment:
      name: pypi
      url: https://pypi.org/p/pyalab
    permissions:
      attestations: write
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4.2.1
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          attestations: false

  install-from-primary:
    name: Install package from primary registry
    if: ${{ github.event.inputs.publish_to_primary }}
    needs: [ publish-to-primary, get-values ]
    runs-on: ubuntu-24.04
    steps:
      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.12.7

      - name: Sleep to allow PyPI Index to update before proceeding to the next step
        uses: juliangruber/sleep-action@v2.0.3
        with:
          time: 60s
      - name: Install from primary registry
        run: pip install pyalab==${{ needs.get-values.outputs.package-version }}
      - name: Confirm library can be imported successfully
        run: python -c "import pyalab"
